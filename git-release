#!/usr/bin/env node

const { exec } = require('child_process');
const cli = require('commander');
const GitHub = require('github-api');
const { prerelease } = require('semver');
const { version } = require('./package');

const EXIT_CODES = {
  REQUEST_ERROR: 1,
  RESPONSE_ERROR: 2,
  UPLOAD_ERROR: 3
};

function isPrerelease(version) {
  return !!prerelease(version);
}

function parseCli(cli, options, argv) {
  options.forEach(option => cli.option(option[0], option[1]));
  cli.parse(argv);
}

function uploadAsset(url, asset) {
  const command = ['curl',
    `-H "Authorization: token ${GH_TOKEN}"`,
    `-H "Content-Type: application/octet-stream"`,
    `--data-binary ${asset}`,
    `"${url}?name=${asset}"`
  ].join(' ');

  exec(command, error => {
    if (error) {
      console.error(`Error: ${error}`);
      process.exit(EXIT_CODES.UPLOAD_ERROR);
    }
  });
}

parseCli(cli, [
  ['-a --asset <asset>', 'Release asset'],
  ['-t --tag <tag>', 'Release tag']
], process.argv);

const { GH_REF, GH_TOKEN, GIT_USER_NAME } = process.env;
const github = new GitHub({ token: GH_TOKEN });
const name = GH_REF.split('/').pop().replace(/.git/, '');
const repo = github.getRepo(GIT_USER_NAME, name);

repo.createRelease({
  name: cli.tag,
  prerelease: isPrerelease(version),
  tag_name: cli.tag
}, (error, result, request) => {
  if (error) {
    console.error(`Error: ${error}`);
    process.exit(EXIT_CODES.RESPONSE_ERROR);
    return;
  }
  const { upload_url } = result;
  uploadAsset(upload_url.replace(/{.*$/, ''), cli.asset);
}).catch(error => {
  console.error(`Error: ${error}`);
  process.exit(EXIT_CODES.REQUEST_ERROR);
});
